import numpy
import sklearn
import joblib


class MalwareDetector:
    def _init__(self, base_path, hexfile, static_vector, cnn=False):
        self.model_path = base_path + "scripts/models/"
        self.data_path = base_path + "data/"
        self.static_vector = static_vector
        self.hexfile = hexfile
        self.cnn = cnn

    def predict(self):
        '''
        arr = self.model()
        if(arr[0] == 1):
            return arr[2]
        else:
            return 0
        '''
        return 1

    def model(self):
        self.predict_arr = []
        bm = self.static_layer_md
        self.predict_arr.append(bm)
        if(bm == 1):
            val_cnn = 0
            if(self.cnn == True):
                val_cnn = self.cnn_images_md()
            md = self.main_ml_model()
            # bytes file
            self.predict_arr.append(val_cnn)
            # main model
            self.predict_arr.append(md)
        return self.predict_arr

    def static_layer_md(self):
        sf_model = joblib.load(self.model_path + "lightgbm_model.joblib")
        sf_result = sf_model.predict(self.static_vector)
        return sf_result

    def feature_extraction_bytes(self):
        # import feature extraction
        path = self.data_path + "bytes/" + self.hexfile + ".bytes"
        return 0

    def feature_extraction_asm(self):
        # import feature extraction
        path = self.data_path + "asm/" + self.hexfile + ".asm"
        return 0

    def cnn_images_md(self):
        '''
        //import model & uncommnet
        model = keras.models.load_model(self.model_path + "cnn_model.h5")
        result = model.predict(self.hexfile)
        return result
        '''
        return 0

    def mail_ml_model(self):
        main_model = joblib.load(self.model_path + "main_model.joblib")
        main_result = main_model.predict(self.static_vector)
        return main_result
