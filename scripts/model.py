import numpy as np
import sklearn
import joblib
from utils.bytes2img import bytes2img
import pandas as pd
from utils.asmfeature import asmFeature
import warnings
warnings.filterwarnings(action='ignore')


class MalwareDetector():

    def __init__(self, base_path, hexfile, static_vector, cnn=False):
        self.base_path = base_path
        self.model_path = base_path + "scripts/models/"
        self.data_path = base_path + "data/"
        self.static_vector = static_vector
        self.hexfile = hexfile
        self.cnn = cnn

    def predict(self):
        '''
        arr = self.model()
        if(arr[0] == 1):
            return arr[2]
        else:
            return 0
        '''
        return self.model()

    def model(self):
        self.predict_arr = []
        bm = self.static_layer_md()
        self.predict_arr.append(bm)
        if(bm == 1):
            if(self.cnn == False):
                self.img_vector = self.cnn_images_md()

            md = self.main_ml_model()
            # main model
            self.predict_arr.append(md)
        return self.predict_arr

    def static_layer_md(self):
        static_vector = pd.DataFrame([self.static_vector])
        sf_model = joblib.load(self.model_path + "lightgbm_model.joblib")
        sf_result = sf_model.predict(static_vector)
        return sf_result

    def feature_extraction_bytes(self):
        # import feature extraction
        path = self.data_path + "bytes/" + self.hexfile + ".bytes"
        im = bytes2img(path)
        im = im.resize((224, 224)).convert("RGB")
        arr = np.expand_dims(im, axis=0)
        return arr

    def feature_extraction_asm(self):
        # import feature extraction
        asm = asmFeature(self.base_path, self.hexfile)
        arr = asm.process()
        return arr

    def cnn_images_md(self):

        # import model & uncommnet
        '''
        model = tf.keras.models.load_model(self.model_path + "BytesCNN.h5")
        arr = self.feature_extraction_bytes()
        result = model.predict(arr)
        return result

        '''
        a = np.zeros(1024)
        return a

    def main_ml_model(self):
        main_model = joblib.load(
            self.model_path + "lightgbm_model_final.joblib")
        arr = self.feature_extraction_asm()
        final_vector = np.concatenate((arr, self.img_vector.reshape(-1)))
        main_result = main_model.predict(final_vector.reshape(1, -1))
        return main_result


if __name__ == '__main__':
    path = "/home/mnk/MNK/Mega/Malware-Detection/"
    hex_filename = "0b8f2b2f095c4b8aa2aeecfb2a7997bd"
    sfv = {'Name': '1667375212686--puttygen64.exe', 'MajorLinkerVersion': 14, 'MinorLinkerVersion': 0, 'SizeOfCode': 262656, 'SizeOfInitializedData': 131072, 'SizeOfUninitializedData': 0, 'AddressOfEntryPoint': 263012, 'BaseOfCode': 131072, 'ImageBase': 5368709120, 'SectionAlignment': 4096, 'FileAlignment': 512, 'MajorOperatingSystemVersion': 6, 'MinorOperatingSystemVersion': 0, 'MinorSubsystemVersion': 0, 'SizeOfImage': 422912, 'SizeOfHeaders': 1024, 'Subsystem': 2, 'DllCharacteristics': 35168, 'Directory_Characteristics': 0, 'Directory_TimeDateStamp': 0, 'Directory_NumberOfNamedEntries': 0, 'Directory_NumberOfIdEntries': 5, 'e_magic': 23117, 'e_cblp': 0, 'e_cp': 0, 'e_crlc': 0, 'e_cparhdr': 0, 'e_minalloc': 0, 'e_maxalloc': 0, 'e_ss': 0, 'e_sp': 0, 'e_csum': 0, 'e_ip': 0, 'e_cs': 0, 'e_lfarlc': 64, 'e_ovno': 0, 'e_res': 8, 'e_oemid': 0, 'e_oeminfo': 0, 'e_res2': 20, 'e_lfanew': 64, 'MajorImageVersion': 0, 'MinorImageVersion': 0, 'MajorSubsystemVersion': 6, 'SizeOfStackReserve': 1048576, 'SizeOfStackCommit': 4096, 'SizeOfHeapReserve': 1048576, 'SizeOfHeapCommit': 4096, 'LoaderFlags': 0, 'NumberOfRvaAndSizes': 16,
           'Num_Suspecious_Sections': 11, 'SectionsMeanEntropy': 3.7553080975232334, 'SectionsMinEntropy': 0.0, 'SectionsMaxEntropy': 6.541164245380884, 'CharacteristicsMean': 1711276098.909091, 'CharacteristicsMin': 1073741888, 'CharacteristicsMax': 3221225600, 'MiscMean': 36252.09090909091, 'MiscMin': 16, 'MiscMax': 262374, 'ImportnumberofDLL': 0, 'SymbolExportNumber': 0, 'md5': 0, 'Machine': 34404, 'SizeOfOptionalHeader': 240, 'Characteristics': 34, 'NumberofSections': 11, 'TimeDateStamp': 0, 'PointerToSymbolTable': 0, 'NumberOfSymbols': 0, 'Load_GlobalFlagsClear': 0, 'Load_GlobalFlagsSet': 0, 'Load_CriticalSectionDefaultTimeout': 0, 'Load_DeCommitFreeBlockThreshold': 0, 'Load_DeCommitTotalFreeThreshold': 0, 'Load_LockPrefixTable': 0, 'Load_VirtualMemoryThreshold': 0, 'Load_ProcessHeapFlags': 0, 'Load_ProcessAffinityMask': 0, 'Load_CSDVersion': 0, 'Load_Reserved1': 0, 'Load_EditList': 0, 'Load_SecurityCookie': 5368811584, 'Load_SEHandlerTable': 0, 'Load_SEHandlerCount': 0, 'Load_GuardCFCheckFunctionPointer': 5368713216, 'Load_Reserved2': 5368713224, 'Load_GuardCFFunctionTable': 0, 'Load_GuardCFFunctionCount': 0, 'Load_GuardFlags': 256}
    model = MalwareDetector(path, hex_filename, sfv, False)
    result = model.predict()
