import re
from path import Path
from sklearn.feature_extraction.text import CountVectorizer
import numpy as np
import pandas as pd
import tqdm
import zlib
import joblib

opcode_rgx = re.compile(r"\s[\dA-F]{2}(?:\+)?\s+([a-z]+)\s")
opcode_rgx.findall("8B 4C 24 04     mov  ecx, [esp+4]")


class asmFeature():
    def __init__(self, path, hexfile):
        self.path = path
        self.asmPath = Path(path + "data/asm/")
        self.bytePath = Path(path + "data/bytes/")
        self.hexfile = hexfile

    def process(self):
        class Read:
            @staticmethod
            def bytes(id: str):
                with self.bytePath.joinpath(id + ".bytes").open() as file:
                    data = file.read()
                items = data.split()
                byte_list = []
                for item in items:
                    if len(item) == 2 and item != "??":
                        byte_list.append(item)
                return byte_list

            @staticmethod
            def asm(id: str) -> str:
                with self.asmPath.joinpath(id + ".asm").open(encoding="utf-8", errors="ignore") as file:
                    return file.read()

            @staticmethod
            def asm_lines(id: str):
                with self.asmPath.joinpath(id + ".asm").open(encoding="utf-8", errors="ignore") as file:
                    return file.readlines()

        def extract_opcode_sequence(id: str) -> str:
            # id -> op-code seq
            opcodes = []
            for line in Read.asm_lines(id):
                for opcode in opcode_rgx.findall(line):
                    opcodes.append(opcode.lower())
            return " ".join(opcodes)

        def extract_ngrams(ids, seq_reader, n):
            class Reader:
                def __init__(self, id: str):
                    self._id: str = id

                def read(self) -> str:
                    return seq_reader(self._id)

            seqs = [Reader(ids)]
            # Name mangling should be considered, `token_pattern` cannot be the default.
            ngrm_vct = joblib.load(
                self.path + "scripts/models/opcode_4gram.joblib")
            ngrms = ngrm_vct.fit_transform(seqs)
            return ngrms

        opcode_ngrms = extract_ngrams(
            self.hexfile, extract_opcode_sequence, 4)

        opcode_feature_file = self.path + "scripts/models/opcode_4gram_names.txt"

        opcode_ngrms_feature = []
        opcode_ngrms_final = []

        # read text file line by line
        with open(opcode_feature_file, 'r') as filehandle:
            for line in filehandle:
                # remove linebreak which is the last character of the string
                currentPlace = line[:-1]
                # add item to the list
                opcode_ngrms_feature.append(int(currentPlace))

        for i in opcode_ngrms_feature:
            try:
                opcode_ngrms_final.append(opcode_ngrms[0][i])
            except:
                opcode_ngrms_final.append(0)

        def extract_content_complexity(id):
            asm = Read.asm(id).encode("utf-8")
            bytes = Read.bytes(id)
            bytes = " ".join([str(byte) for byte in bytes]).encode("utf-8")
            arr = []
            arr.append(len(asm))
            arr.append(len(zlib.compress(asm)))
            arr.append(len(bytes))
            arr.append(len(zlib.compress(bytes)))

            arr.append((arr[0] / arr[1]))
            arr.append((arr[2] / arr[4]))
            return arr

        cmplxty = np.array(extract_content_complexity(self.hexfile))

        opcode_ngrms_final = np.array(opcode_ngrms_final)

        final = np.concatenate(
            (cmplxty, opcode_ngrms_final), axis=0)

        return final


if __name__ == "__main__":
    asmPath = Path("data/asm")
    bytePath = Path("data/bytes")
    hexfile = "0b8f2b2f095c4b8aa2aeecfb2a7997bd"

    asmFeature = asmFeature("/home/mnk/MNK/Mega/Malware-Detection/", hexfile)
    asmFeature.process()
